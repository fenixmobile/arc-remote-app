// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: pairingmessage.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

/// pairingmessage.proto

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Pairing_RoleType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unknown // = 0
  case input // = 1
  case output // = 2
  case unrecognized // = -1
  case UNRECOGNIZED(Int)

  init() {
    self = .unknown
  }

  init?(rawValue: Int) {
    switch rawValue {
    case -1: self = .unrecognized
    case 0: self = .unknown
    case 1: self = .input
    case 2: self = .output
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unrecognized: return -1
    case .unknown: return 0
    case .input: return 1
    case .output: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Pairing_RoleType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Pairing_RoleType] = [
    .unknown,
    .input,
    .output,
  ]
}

#endif  // swift(>=4.2)

enum Pairing_EncodingType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unknown // = 0
  case alphanumeric // = 1
  case numeric // = 2
  case hexadecimal // = 3
  case qrCode // = 4
  case unrecognized // = -1
  case UNRECOGNIZED(Int)

  init() {
    self = .unknown
  }

  init?(rawValue: Int) {
    switch rawValue {
    case -1: self = .unrecognized
    case 0: self = .unknown
    case 1: self = .alphanumeric
    case 2: self = .numeric
    case 3: self = .hexadecimal
    case 4: self = .qrCode
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unrecognized: return -1
    case .unknown: return 0
    case .alphanumeric: return 1
    case .numeric: return 2
    case .hexadecimal: return 3
    case .qrCode: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Pairing_EncodingType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Pairing_EncodingType] = [
    .unknown,
    .alphanumeric,
    .numeric,
    .hexadecimal,
    .qrCode,
  ]
}

#endif  // swift(>=4.2)

enum Pairing_ErrorCode: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unknown // = 0
  case notPaired // = 1
  case noService // = 2
  case alreadyPaired // = 3
  case unrecognized // = -1
  case UNRECOGNIZED(Int)

  init() {
    self = .unknown
  }

  init?(rawValue: Int) {
    switch rawValue {
    case -1: self = .unrecognized
    case 0: self = .unknown
    case 1: self = .notPaired
    case 2: self = .noService
    case 3: self = .alreadyPaired
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unrecognized: return -1
    case .unknown: return 0
    case .notPaired: return 1
    case .noService: return 2
    case .alreadyPaired: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Pairing_ErrorCode: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Pairing_ErrorCode] = [
    .unknown,
    .notPaired,
    .noService,
    .alreadyPaired,
  ]
}

#endif  // swift(>=4.2)

enum Pairing_Status: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unknown // = 0
  case ok // = 1
  case error // = 2
  case unrecognized // = -1
  case UNRECOGNIZED(Int)

  init() {
    self = .unknown
  }

  init?(rawValue: Int) {
    switch rawValue {
    case -1: self = .unrecognized
    case 0: self = .unknown
    case 1: self = .ok
    case 2: self = .error
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unrecognized: return -1
    case .unknown: return 0
    case .ok: return 1
    case .error: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Pairing_Status: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Pairing_Status] = [
    .unknown,
    .ok,
    .error,
  ]
}

#endif  // swift(>=4.2)

struct Pairing_PairingRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var serviceName: String = String()

  var clientName: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Pairing_PairingEncoding {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var type: Pairing_EncodingType = .unknown

  var symbolLength: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Pairing_PairingOption {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var inputEncodings: [Pairing_PairingEncoding] = []

  var outputEncodings: [Pairing_PairingEncoding] = []

  var preferredRole: Pairing_RoleType = .unknown

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Pairing_PairingConfiguration {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var encoding: Pairing_PairingEncoding {
    get {return _encoding ?? Pairing_PairingEncoding()}
    set {_encoding = newValue}
  }
  /// Returns true if `encoding` has been explicitly set.
  var hasEncoding: Bool {return self._encoding != nil}
  /// Clears the value of `encoding`. Subsequent reads from it will return its default value.
  mutating func clearEncoding() {self._encoding = nil}

  var clientRole: Pairing_RoleType = .unknown

  var unknownFields = SwiftProtobuf.UnknownStorage()

  private var _encoding: Pairing_PairingEncoding? = nil

  init() {}
}

struct Pairing_PairingSecret {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var secret: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Pairing_PairingMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var protocolVersion: Int32 = 0

  var status: Pairing_Status = .unknown

  var pairingRequest: Pairing_PairingRequest {
    get {return _pairingRequest ?? Pairing_PairingRequest()}
    set {_pairingRequest = newValue}
  }
  /// Returns true if `pairingRequest` has been explicitly set.
  var hasPairingRequest: Bool {return self._pairingRequest != nil}
  /// Clears the value of `pairingRequest`. Subsequent reads from it will return its default value.
  mutating func clearPairingRequest() {self._pairingRequest = nil}

  var pairingOption: Pairing_PairingOption {
    get {return _pairingOption ?? Pairing_PairingOption()}
    set {_pairingOption = newValue}
  }
  /// Returns true if `pairingOption` has been explicitly set.
  var hasPairingOption: Bool {return self._pairingOption != nil}
  /// Clears the value of `pairingOption`. Subsequent reads from it will return its default value.
  mutating func clearPairingOption() {self._pairingOption = nil}

  var pairingConfiguration: Pairing_PairingConfiguration {
    get {return _pairingConfiguration ?? Pairing_PairingConfiguration()}
    set {_pairingConfiguration = newValue}
  }
  /// Returns true if `pairingConfiguration` has been explicitly set.
  var hasPairingConfiguration: Bool {return self._pairingConfiguration != nil}
  /// Clears the value of `pairingConfiguration`. Subsequent reads from it will return its default value.
  mutating func clearPairingConfiguration() {self._pairingConfiguration = nil}

  var pairingSecret: Pairing_PairingSecret {
    get {return _pairingSecret ?? Pairing_PairingSecret()}
    set {_pairingSecret = newValue}
  }
  /// Returns true if `pairingSecret` has been explicitly set.
  var hasPairingSecret: Bool {return self._pairingSecret != nil}
  /// Clears the value of `pairingSecret`. Subsequent reads from it will return its default value.
  mutating func clearPairingSecret() {self._pairingSecret = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  private var _pairingRequest: Pairing_PairingRequest? = nil
  private var _pairingOption: Pairing_PairingOption? = nil
  private var _pairingConfiguration: Pairing_PairingConfiguration? = nil
  private var _pairingSecret: Pairing_PairingSecret? = nil

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension Pairing_RoleType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "INPUT"),
    2: .same(proto: "OUTPUT"),
  ]
}

extension Pairing_EncodingType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "ALPHANUMERIC"),
    2: .same(proto: "NUMERIC"),
    3: .same(proto: "HEXADECIMAL"),
    4: .same(proto: "QR_CODE"),
  ]
}

extension Pairing_ErrorCode: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "NOT_PAIRED"),
    2: .same(proto: "NO_SERVICE"),
    3: .same(proto: "ALREADY_PAIRED"),
  ]
}

extension Pairing_Status: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "OK"),
    2: .same(proto: "ERROR"),
  ]
}

extension Pairing_PairingRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Pairing.PairingRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "service_name"),
    2: .same(proto: "client_name"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.serviceName) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.clientName) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.serviceName.isEmpty {
      try visitor.visitSingularStringField(value: self.serviceName, fieldNumber: 1)
    }
    if !self.clientName.isEmpty {
      try visitor.visitSingularStringField(value: self.clientName, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pairing_PairingRequest, rhs: Pairing_PairingRequest) -> Bool {
    if lhs.serviceName != rhs.serviceName {return false}
    if lhs.clientName != rhs.clientName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Pairing_PairingEncoding: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Pairing.PairingEncoding"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "symbol_length"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.symbolLength) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.type != .unknown {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 1)
    }
    if self.symbolLength != 0 {
      try visitor.visitSingularInt32Field(value: self.symbolLength, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pairing_PairingEncoding, rhs: Pairing_PairingEncoding) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.symbolLength != rhs.symbolLength {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Pairing_PairingOption: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Pairing.PairingOption"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "input_encodings"),
    2: .same(proto: "output_encodings"),
    3: .same(proto: "preferred_role"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.inputEncodings) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.outputEncodings) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.preferredRole) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.inputEncodings.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.inputEncodings, fieldNumber: 1)
    }
    if !self.outputEncodings.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.outputEncodings, fieldNumber: 2)
    }
    if self.preferredRole != .unknown {
      try visitor.visitSingularEnumField(value: self.preferredRole, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pairing_PairingOption, rhs: Pairing_PairingOption) -> Bool {
    if lhs.inputEncodings != rhs.inputEncodings {return false}
    if lhs.outputEncodings != rhs.outputEncodings {return false}
    if lhs.preferredRole != rhs.preferredRole {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Pairing_PairingConfiguration: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Pairing.PairingConfiguration"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "encoding"),
    2: .same(proto: "client_role"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._encoding) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.clientRole) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._encoding {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.clientRole != .unknown {
      try visitor.visitSingularEnumField(value: self.clientRole, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pairing_PairingConfiguration, rhs: Pairing_PairingConfiguration) -> Bool {
    if lhs._encoding != rhs._encoding {return false}
    if lhs.clientRole != rhs.clientRole {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Pairing_PairingSecret: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Pairing.PairingSecret"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "secret"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.secret) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.secret.isEmpty {
      try visitor.visitSingularBytesField(value: self.secret, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pairing_PairingSecret, rhs: Pairing_PairingSecret) -> Bool {
    if lhs.secret != rhs.secret {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Pairing_PairingMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Pairing.PairingMessage"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "protocol_version"),
    2: .same(proto: "status"),
    3: .same(proto: "pairing_request"),
    4: .same(proto: "pairing_option"),
    5: .same(proto: "pairing_configuration"),
    6: .same(proto: "pairing_secret"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.protocolVersion) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._pairingRequest) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._pairingOption) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._pairingConfiguration) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._pairingSecret) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.protocolVersion != 0 {
      try visitor.visitSingularInt32Field(value: self.protocolVersion, fieldNumber: 1)
    }
    if self.status != .unknown {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 2)
    }
    if let v = self._pairingRequest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if let v = self._pairingOption {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if let v = self._pairingConfiguration {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._pairingSecret {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Pairing_PairingMessage, rhs: Pairing_PairingMessage) -> Bool {
    if lhs.protocolVersion != rhs.protocolVersion {return false}
    if lhs.status != rhs.status {return false}
    if lhs._pairingRequest != rhs._pairingRequest {return false}
    if lhs._pairingOption != rhs._pairingOption {return false}
    if lhs._pairingConfiguration != rhs._pairingConfiguration {return false}
    if lhs._pairingSecret != rhs._pairingSecret {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
